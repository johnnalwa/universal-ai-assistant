type CanisterMetrics = record {
  storage_used_bytes : nat64;
  total_queries : nat64;
  total_users : nat64;
  learning_events : nat64;
  uptime_start : nat64;
  knowledge_nodes_created : nat64;
  total_cycles_consumed : nat64;
};
type CommunicationStyle = record {
  formality_level : FormalityLevel;
  technical_level : TechnicalLevel;
  emoji_usage : bool;
  detail_preference : DetailLevel;
  humor_preference : bool;
};
type ConversationContext = record {
  topic : text;
  last_message_timestamp : nat64;
  user_sentiment : Sentiment;
  ongoing_tasks : vec Task;
  related_memories : vec text;
  mentioned_entities : vec Entity;
  thread_id : text;
};
type ConversationPatterns = record {
  question_types : vec record { text; nat32 };
  avg_session_length : float32;
  common_topics : vec text;
  time_patterns : vec nat32;
};
type DetailLevel = variant { Detailed; Comprehensive; Brief; Moderate };
type EnhancedChatMessage = record {
  ii_verified : opt bool;
  content : text;
  provider : text;
  context_thread_id : opt text;
  role : text;
  user_sentiment : opt Sentiment;
  extracted_facts : vec ExtractedFact;
  referenced_memories : vec text;
  learned_preferences : vec LearnedPreference;
  timestamp : nat64;
  cycles_cost : opt nat64;
  response_strategy : opt ResponseStrategy;
  content_stored_on_chain : opt bool;
};
type Entity = record { context : text; name : text; entity_type : EntityType };
type EntityType = variant {
  Date;
  Company;
  Person;
  Technology;
  Location;
  Project;
  Other;
};
type ExtractedFact = record {
  fact_type : FactType;
  fact : text;
  confidence : float32;
  should_remember : bool;
};
type FactType = variant {
  Goal;
  Knowledge;
  Experience;
  Preference;
  PersonalInfo;
  Relationship;
};
type FormalityLevel = variant { VeryFormal; Formal; Verycasual; Casual };
type ImportantEvent = record {
  date : nat64;
  importance : float32;
  event : text;
  category : text;
};
type KnowledgeEdge = record {
  from_node : text;
  to_node : text;
  created_at : nat64;
  relationship_type : RelationshipType;
  strength : float32;
};
type LearnedPreference = record {
  preference : text;
  category : text;
  confidence : float32;
};
type LearningHistory = record {
  interaction_count : nat32;
  last_major_update : nat64;
  topics_discussed : vec record { text; nat32 };
  preferred_response_length : ResponseLength;
  question_asking_frequency : float32;
  learning_speed : float32;
};
type MemoryNode = record {
  id : text;
  node_type : MemoryNodeType;
  content : text;
  tags : vec text;
  created_at : nat64;
  last_accessed : nat64;
  related_conversations : vec text;
  importance_score : float32;
  access_count : nat32;
};
type MemoryNodeType = variant {
  Fact;
  Goal;
  Knowledge;
  Experience;
  Preference;
  Context;
  Relationship;
};
type PersonalGoal = record {
  goal : text;
  importance : float32;
  progress : float32;
  category : text;
  target_date : opt nat64;
};
type PersonalKnowledgeGraph = record {
  learning_patterns : LearningHistory;
  last_updated : nat64;
  relationships : vec KnowledgeEdge;
  context_threads : vec record { text; ConversationContext };
  memory_nodes : vec record { text; MemoryNode };
  user_profile : UserProfile;
};
type PersonalRelationship = record {
  context : text;
  name : text;
  importance : float32;
  relationship_type : text;
};
type RelationshipType = variant {
  PartOf;
  Related;
  UsedFor;
  OppositeOf;
  ExampleOf;
  LeadsTo;
  CausedBy;
};
type ResponseLength = variant { Short; Long; Medium; Variable };
type ResponsePreferences = record {
  autopilot_enabled : bool;
  prefers_step_by_step : bool;
  prefers_detailed_explanations : bool;
  prefers_quick_answers : bool;
  prefers_examples : bool;
};
type ResponseStrategy = variant {
  InquiryFirst : record { question : text; why_asking : text };
  PartialAnswer : record { known_info : text; clarification_needed : text };
  ConfidentAnswer : record { sources : vec text; confidence : float32 };
  LearningOpportunity : record { suggestion : text };
};
type Result = variant { Ok : UserDashboard; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Sentiment = variant {
  Negative;
  Excited;
  Curious;
  Frustrated;
  Positive;
  Neutral;
};
type SubscriptionTier = variant {
  Premium : record { cycles_included : nat64; priority_access : bool };
  Enterprise : record {
    cycles_included : nat64;
    private_models : bool;
    custom_endpoints : bool;
  };
  Basic : record { cycles_included : nat64 };
};
type Task = record {
  status : TaskStatus;
  description : text;
  created_at : nat64;
  due_date : opt nat64;
};
type TaskStatus = variant { Paused; Active; Cancelled; Completed };
type TechnicalLevel = variant { Beginner; Advanced; Intermediate; Expert };
type UserDashboard = record {
  cycles_balance : nat64;
  days_since_first_interaction : nat64;
  total_cycles_spent : nat64;
  knowledge_nodes_count : nat64;
  learning_progress : float32;
  stored_content_count : nat64;
  memory_strength : float32;
  subscription_tier : opt SubscriptionTier;
  token_balance : nat64;
  conversation_count : nat64;
};
type UserProfile = record {
  preferred_name : opt text;
  personality_traits : vec text;
  interests : vec text;
  name : opt text;
  response_preferences : ResponsePreferences;
  work_context : opt WorkContext;
  knowledge_domains : vec record { text; float32 };
  goals : vec PersonalGoal;
  important_dates : vec ImportantEvent;
  expertise_areas : vec text;
  relationships : vec PersonalRelationship;
  conversation_patterns : ConversationPatterns;
  communication_style : CommunicationStyle;
};
type UserProfileUpdate = record {
  interests : opt vec text;
  name : opt text;
  response_preferences : opt ResponsePreferences;
  goals : opt vec PersonalGoal;
};
type WorkContext = record {
  job_title : opt text;
  company : opt text;
  current_projects : vec text;
  skills : vec text;
  industry : opt text;
};
service : {
  get_available_providers : () -> (vec text) query;
  get_canister_metrics : () -> (CanisterMetrics) query;
  get_user_conversations : (user : principal) -> (
      vec EnhancedChatMessage,
    ) query;
  get_user_dashboard : (user : principal) -> (Result) query;
  get_user_knowledge_graph : (user : principal) -> (
      opt PersonalKnowledgeGraph,
    ) query;
  get_user_memories : (user : principal, limit : opt nat32) -> (
      vec MemoryNode,
    ) query;
  greet : (name : text) -> (text) query;
  icp_ai_prompt : (prompt_text : text, opt text, opt text, opt bool) -> (
      Result_1,
    );
  memory_mind_prompt : (
      prompt_text : text,
      context_thread_id : opt text,
      opt bool,
    ) -> (Result_1);
  prompt : (prompt_text : text) -> (Result_1);
  set_api_key : (key : text) -> ();
  update_user_profile : (
      user : principal,
      profile_update : UserProfileUpdate,
    ) -> (Result_1);
}
